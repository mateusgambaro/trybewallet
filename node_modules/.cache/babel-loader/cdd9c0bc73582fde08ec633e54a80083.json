{"ast":null,"code":"import { REQUEST_API, REQUEST_API_SUCCESS, REQUEST_API_ERROR, REQUEST_API_EXPENSES, REQUEST_API_EXPENSES_SUCCESS } from '../actions';\nconst INNITIAL_STATE = {\n  currencies: [],\n  isFetching: false,\n  expenses: []\n};\n\nconst wallet = (state = INNITIAL_STATE, action) => {\n  switch (action.type) {\n    case REQUEST_API:\n      return { ...state,\n        isFetching: true\n      };\n\n    case REQUEST_API_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        currencies: Object.keys(action.payload)\n      };\n\n    case REQUEST_API_ERROR:\n      return { ...state,\n        isFetching: false,\n        currencies: Error\n      };\n\n    case REQUEST_API_EXPENSES:\n      return { ...state,\n        isFetching: false\n      };\n\n    case REQUEST_API_EXPENSES_SUCCESS:\n      return { ...state,\n        expenses: [...state.expenses, {\n          id: action.id,\n          ...action.expensesInfo,\n          exchangeRates: action.dataAPI\n        }]\n      };\n\n    default:\n      return state;\n  }\n};\n\nfunction deleteExpense2(state, action) {\n  const newArray = state.expenses.filter(expense2 => expense2.id !== action.expense.id);\n  const newTotal = Number(Number(action.expense.value) * Number(action.expense.exchangeRates[action.expense.currency].ask));\n  return { ...state,\n    expenses: newArray,\n    total: Number(state.total - newTotal).toFixed(2)\n  };\n\n  function setEdited(state, action) {\n    const newArr = state.expenses.map(expense2 => {\n      if (expense2.id === action.expense.id) {\n        return action.expense;\n      }\n\n      return expense2;\n    });\n    return { ...state,\n      expenses: newArr,\n      editing: false\n    };\n  }\n}\n\nexport default wallet;","map":{"version":3,"sources":["/home/mateus/trybewallet/src/reducers/wallet.js"],"names":["REQUEST_API","REQUEST_API_SUCCESS","REQUEST_API_ERROR","REQUEST_API_EXPENSES","REQUEST_API_EXPENSES_SUCCESS","INNITIAL_STATE","currencies","isFetching","expenses","wallet","state","action","type","Object","keys","payload","Error","id","expensesInfo","exchangeRates","dataAPI","deleteExpense2","newArray","filter","expense2","expense","newTotal","Number","value","currency","ask","total","toFixed","setEdited","newArr","map","editing"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,mBAAtB,EACEC,iBADF,EAEEC,oBAFF,EAEwBC,4BAFxB,QAE4D,YAF5D;AAIA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,UAAU,EAAE,EADS;AAErBC,EAAAA,UAAU,EAAE,KAFS;AAGrBC,EAAAA,QAAQ,EAAE;AAHW,CAAvB;;AAMA,MAAMC,MAAM,GAAG,CAACC,KAAK,GAAGL,cAAT,EAAyBM,MAAzB,KAAoC;AACjD,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKZ,WAAL;AACE,aAAO,EACL,GAAGU,KADE;AACKH,QAAAA,UAAU,EAAE;AADjB,OAAP;;AAIF,SAAKN,mBAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELH,QAAAA,UAAU,EAAE,KAFP;AAGLD,QAAAA,UAAU,EAAEO,MAAM,CAACC,IAAP,CAAYH,MAAM,CAACI,OAAnB;AAHP,OAAP;;AAMF,SAAKb,iBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELH,QAAAA,UAAU,EAAE,KAFP;AAGLD,QAAAA,UAAU,EAAEU;AAHP,OAAP;;AAMF,SAAKb,oBAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELH,QAAAA,UAAU,EAAE;AAFP,OAAP;;AAKF,SAAKH,4BAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELF,QAAAA,QAAQ,EAAE,CACR,GAAGE,KAAK,CAACF,QADD,EAER;AACES,UAAAA,EAAE,EAAEN,MAAM,CAACM,EADb;AAEE,aAAGN,MAAM,CAACO,YAFZ;AAGEC,UAAAA,aAAa,EAAER,MAAM,CAACS;AAHxB,SAFQ;AAFL,OAAP;;AAYF;AACE,aAAOV,KAAP;AAxCF;AA0CD,CA3CD;;AA6CA,SAASW,cAAT,CAAwBX,KAAxB,EAA+BC,MAA/B,EAAuC;AACrC,QAAMW,QAAQ,GAAGZ,KAAK,CAACF,QAAN,CAAee,MAAf,CACdC,QAAD,IAAcA,QAAQ,CAACP,EAAT,KAAgBN,MAAM,CAACc,OAAP,CAAeR,EAD9B,CAAjB;AAGA,QAAMS,QAAQ,GAAGC,MAAM,CACrBA,MAAM,CAAChB,MAAM,CAACc,OAAP,CAAeG,KAAhB,CAAN,GACED,MAAM,CAAChB,MAAM,CAACc,OAAP,CAAeN,aAAf,CAA6BR,MAAM,CAACc,OAAP,CAAeI,QAA5C,EAAsDC,GAAvD,CAFa,CAAvB;AAIA,SAAO,EACL,GAAGpB,KADE;AAELF,IAAAA,QAAQ,EAAEc,QAFL;AAGLS,IAAAA,KAAK,EAAEJ,MAAM,CAACjB,KAAK,CAACqB,KAAN,GAAcL,QAAf,CAAN,CAA+BM,OAA/B,CAAuC,CAAvC;AAHF,GAAP;;AAMA,WAASC,SAAT,CAAmBvB,KAAnB,EAA0BC,MAA1B,EAAkC;AAChC,UAAMuB,MAAM,GAAGxB,KAAK,CAACF,QAAN,CAAe2B,GAAf,CAAoBX,QAAD,IAAc;AAC9C,UAAIA,QAAQ,CAACP,EAAT,KAAgBN,MAAM,CAACc,OAAP,CAAeR,EAAnC,EAAuC;AACrC,eAAON,MAAM,CAACc,OAAd;AACD;;AACD,aAAOD,QAAP;AACD,KALc,CAAf;AAOA,WAAO,EACL,GAAGd,KADE;AAELF,MAAAA,QAAQ,EAAE0B,MAFL;AAGLE,MAAAA,OAAO,EAAE;AAHJ,KAAP;AAKD;AAEA;;AAEH,eAAe3B,MAAf","sourcesContent":["import { REQUEST_API, REQUEST_API_SUCCESS,\n  REQUEST_API_ERROR,\n  REQUEST_API_EXPENSES, REQUEST_API_EXPENSES_SUCCESS } from '../actions';\n\nconst INNITIAL_STATE = {\n  currencies: [],\n  isFetching: false,\n  expenses: [],\n};\n\nconst wallet = (state = INNITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_API:\n    return {\n      ...state, isFetching: true,\n    };\n\n  case REQUEST_API_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currencies: Object.keys(action.payload),\n    };\n\n  case REQUEST_API_ERROR:\n    return {\n      ...state,\n      isFetching: false,\n      currencies: Error,\n    };\n\n  case REQUEST_API_EXPENSES:\n    return {\n      ...state,\n      isFetching: false,\n    };\n\n  case REQUEST_API_EXPENSES_SUCCESS:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        {\n          id: action.id,\n          ...action.expensesInfo,\n          exchangeRates: action.dataAPI,\n        },\n      ],\n    };\n\n  default:\n    return state;\n  }\n};\n\nfunction deleteExpense2(state, action) {\n  const newArray = state.expenses.filter(\n    (expense2) => expense2.id !== action.expense.id,\n  );\n  const newTotal = Number(\n    Number(action.expense.value)\n    * Number(action.expense.exchangeRates[action.expense.currency].ask),\n  );\n  return {\n    ...state,\n    expenses: newArray,\n    total: Number(state.total - newTotal).toFixed(2),\n  };\n\n  function setEdited(state, action) {\n    const newArr = state.expenses.map((expense2) => {\n      if (expense2.id === action.expense.id) {\n        return action.expense;\n      }\n      return expense2;\n    });\n  \n    return {\n      ...state,\n      expenses: newArr,\n      editing: false,\n    };\n  }\n  \n  }\n\nexport default wallet;\n"]},"metadata":{},"sourceType":"module"}