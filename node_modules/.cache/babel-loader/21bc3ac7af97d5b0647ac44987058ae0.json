{"ast":null,"code":"import { REQUEST_API, REQUEST_API_SUCCESS, REQUEST_API_ERROR, REQUEST_API_EXPENSES, REQUEST_API_EXPENSES_SUCCESS } from '../actions';\nconst INNITIAL_STATE = {\n  currencies: [],\n  isFetching: false,\n  expenses: []\n};\n\nconst wallet = (state = INNITIAL_STATE, action) => {\n  switch (action.type) {\n    case REQUEST_API:\n      return { ...state,\n        isFetching: true\n      };\n\n    case REQUEST_API_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        currencies: Object.keys(action.payload)\n      };\n\n    case REQUEST_API_ERROR:\n      return { ...state,\n        isFetching: false,\n        currencies: Error\n      };\n\n    case REQUEST_API_EXPENSES:\n      return { ...state,\n        isFetching: false\n      };\n\n    case REQUEST_API_EXPENSES_SUCCESS:\n      return { ...state,\n        expenses: [...state.expenses, {\n          id: action.id,\n          ...action.expensesInfo,\n          exchangeRates: action.dataAPI\n        }]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default wallet;","map":{"version":3,"sources":["/home/mateus/trybewallet/src/reducers/wallet.js"],"names":["REQUEST_API","REQUEST_API_SUCCESS","REQUEST_API_ERROR","REQUEST_API_EXPENSES","REQUEST_API_EXPENSES_SUCCESS","INNITIAL_STATE","currencies","isFetching","expenses","wallet","state","action","type","Object","keys","payload","Error","id","expensesInfo","exchangeRates","dataAPI"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,mBAAtB,EACEC,iBADF,EAEEC,oBAFF,EAEwBC,4BAFxB,QAE4D,YAF5D;AAIA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,UAAU,EAAE,EADS;AAErBC,EAAAA,UAAU,EAAE,KAFS;AAGrBC,EAAAA,QAAQ,EAAE;AAHW,CAAvB;;AAMA,MAAMC,MAAM,GAAG,CAACC,KAAK,GAAGL,cAAT,EAAyBM,MAAzB,KAAoC;AACjD,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKZ,WAAL;AACE,aAAO,EACL,GAAGU,KADE;AACKH,QAAAA,UAAU,EAAE;AADjB,OAAP;;AAIF,SAAKN,mBAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELH,QAAAA,UAAU,EAAE,KAFP;AAGLD,QAAAA,UAAU,EAAEO,MAAM,CAACC,IAAP,CAAYH,MAAM,CAACI,OAAnB;AAHP,OAAP;;AAMF,SAAKb,iBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELH,QAAAA,UAAU,EAAE,KAFP;AAGLD,QAAAA,UAAU,EAAEU;AAHP,OAAP;;AAMF,SAAKb,oBAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELH,QAAAA,UAAU,EAAE;AAFP,OAAP;;AAKF,SAAKH,4BAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELF,QAAAA,QAAQ,EAAE,CACR,GAAGE,KAAK,CAACF,QADD,EAER;AACES,UAAAA,EAAE,EAAEN,MAAM,CAACM,EADb;AAEE,aAAGN,MAAM,CAACO,YAFZ;AAGEC,UAAAA,aAAa,EAAER,MAAM,CAACS;AAHxB,SAFQ;AAFL,OAAP;;AAYF;AACE,aAAOV,KAAP;AAxCF;AA0CD,CA3CD;;AA6CA,eAAeD,MAAf","sourcesContent":["import { REQUEST_API, REQUEST_API_SUCCESS,\n  REQUEST_API_ERROR,\n  REQUEST_API_EXPENSES, REQUEST_API_EXPENSES_SUCCESS } from '../actions';\n\nconst INNITIAL_STATE = {\n  currencies: [],\n  isFetching: false,\n  expenses: [],\n};\n\nconst wallet = (state = INNITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_API:\n    return {\n      ...state, isFetching: true,\n    };\n\n  case REQUEST_API_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currencies: Object.keys(action.payload),\n    };\n\n  case REQUEST_API_ERROR:\n    return {\n      ...state,\n      isFetching: false,\n      currencies: Error,\n    };\n\n  case REQUEST_API_EXPENSES:\n    return {\n      ...state,\n      isFetching: false,\n    };\n\n  case REQUEST_API_EXPENSES_SUCCESS:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        {\n          id: action.id,\n          ...action.expensesInfo,\n          exchangeRates: action.dataAPI,\n        },\n      ],\n    };\n\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n"]},"metadata":{},"sourceType":"module"}