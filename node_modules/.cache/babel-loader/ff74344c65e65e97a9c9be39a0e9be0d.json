{"ast":null,"code":"import { REQUEST_API, REQUEST_API_SUCCESS, REQUEST_API_ERROR, REQUEST_API_EXPENSES, REQUEST_API_EXPENSES_SUCCESS, SAVE_EXPENSE, DELETE_EXPENSE, EDIT_EXPENSE, FINISH_EDIT, SET_EDITED_EXPENSE } from '../actions';\nconst INNITIAL_STATE = {\n  currencies: [],\n  isFetching: false,\n  expenses: [],\n  total: '',\n  editExpense: ''\n};\n\nfunction setEdited(state, action) {\n  const newArr = state.expenses.map(expense2 => {\n    if (expense2.id === action.expense.id) {\n      return action.expense;\n    }\n\n    return expense2;\n  });\n  return { ...state,\n    expenses: newArr,\n    editing: false\n  };\n}\n\nconst wallet = (state = INNITIAL_STATE, action) => {\n  const {\n    expense,\n    rates\n  } = action;\n\n  switch (action.type) {\n    case REQUEST_API:\n      return { ...state,\n        isFetching: true\n      };\n\n    case REQUEST_API_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        currencies: Object.keys(action.payload)\n      };\n\n    case REQUEST_API_ERROR:\n      return { ...state,\n        isFetching: false,\n        currencies: Error\n      };\n\n    case REQUEST_API_EXPENSES:\n      return { ...state,\n        isFetching: false\n      };\n\n    case REQUEST_API_EXPENSES_SUCCESS:\n      return { ...state,\n        expenses: [...state.expenses, {\n          id: action.id,\n          ...action.expensesInfo,\n          exchangeRates: action.dataAPI\n        }]\n      };\n\n    case SAVE_EXPENSE:\n      {\n        expense.exchangeRates = rates;\n        const valor = expense.value * rates[expense.currency].ask;\n        const total = Number(state.total) + Number(valor);\n        return { ...state,\n          expenses: [...state.expenses, expense],\n          total: Number(total).toFixed(2)\n        };\n      }\n\n    case DELETE_EXPENSE:\n      return deleteExpense2(state, action);\n\n    case EDIT_EXPENSE:\n      {\n        return { ...state,\n          editExpense: action.expense,\n          editing: true\n        };\n      }\n\n    case FINISH_EDIT:\n      {\n        return { ...state,\n          editExpense: ''\n        };\n      }\n\n    case SET_EDITED_EXPENSE:\n      return setEdited(state, action);\n\n    default:\n      return state;\n  }\n};\n\nfunction deleteExpense2(state, action) {\n  const newArray = state.expenses.filter(expense2 => expense2.id !== action.expense.id);\n  const newTotal = Number(Number(action.expense.value) * Number(action.expense.exchangeRates[action.expense.currency].ask));\n  return { ...state,\n    expenses: newArray,\n    total: Number(state.total - newTotal).toFixed(2)\n  };\n}\n\nexport default wallet;","map":{"version":3,"sources":["/home/mateus/trybewallet/src/reducers/wallet.js"],"names":["REQUEST_API","REQUEST_API_SUCCESS","REQUEST_API_ERROR","REQUEST_API_EXPENSES","REQUEST_API_EXPENSES_SUCCESS","SAVE_EXPENSE","DELETE_EXPENSE","EDIT_EXPENSE","FINISH_EDIT","SET_EDITED_EXPENSE","INNITIAL_STATE","currencies","isFetching","expenses","total","editExpense","setEdited","state","action","newArr","map","expense2","id","expense","editing","wallet","rates","type","Object","keys","payload","Error","expensesInfo","exchangeRates","dataAPI","valor","value","currency","ask","Number","toFixed","deleteExpense2","newArray","filter","newTotal"],"mappings":"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","sourcesContent":["import { REQUEST_API, REQUEST_API_SUCCESS,\n  REQUEST_API_ERROR,\n  REQUEST_API_EXPENSES,\n  REQUEST_API_EXPENSES_SUCCESS,\n  SAVE_EXPENSE,\n  DELETE_EXPENSE,\n  EDIT_EXPENSE,\n  FINISH_EDIT,\n  SET_EDITED_EXPENSE,\n\n} from '../actions';\n\nconst INNITIAL_STATE = {\n  currencies: [],\n  isFetching: false,\n  expenses: [],\n  total: '',\n  editExpense: '',\n};\n\nfunction setEdited(state, action) {\n  const newArr = state.expenses.map((expense2) => {\n    if (expense2.id === action.expense.id) {\n      return action.expense;\n    }\n    return expense2;\n  });\n\n  return {\n    ...state,\n    expenses: newArr,\n    editing: false,\n  };\n}\n\nconst wallet = (state = INNITIAL_STATE, action) => {\n  const { expense, rates } = action;\n  switch (action.type) {\n  case REQUEST_API:\n    return {\n      ...state, isFetching: true,\n    };\n\n  case REQUEST_API_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currencies: Object.keys(action.payload),\n    };\n\n  case REQUEST_API_ERROR:\n    return {\n      ...state,\n      isFetching: false,\n      currencies: Error,\n    };\n\n  case REQUEST_API_EXPENSES:\n    return {\n      ...state,\n      isFetching: false,\n    };\n\n  case REQUEST_API_EXPENSES_SUCCESS:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        {\n          id: action.id,\n          ...action.expensesInfo,\n          exchangeRates: action.dataAPI,\n        },\n      ],\n    };\n\n    case SAVE_EXPENSE: {\n      expense.exchangeRates = rates;\n      const valor = expense.value * rates[expense.currency].ask;\n      const total = Number(state.total) + Number(valor);\n      \n      return {\n        ...state,\n        expenses: [...state.expenses, expense],\n        total: Number(total).toFixed(2),\n      };\n    }\n\n    case DELETE_EXPENSE: return deleteExpense2(state, action);\n\n    case EDIT_EXPENSE: {\n      return {\n        ...state,\n        editExpense: action.expense,\n        editing: true,\n      };\n    }\n  \n    case FINISH_EDIT: {\n      return {\n        ...state,\n        editExpense: '',\n      };\n    }\n  \n    case SET_EDITED_EXPENSE: return setEdited(state, action);\n\n  default:\n    return state;\n  }\n};\n\nfunction deleteExpense2(state, action) {\n  const newArray = state.expenses.filter(\n    (expense2) => expense2.id !== action.expense.id,\n  );\n  const newTotal = Number(\n    Number(action.expense.value)\n    * Number(action.expense.exchangeRates[action.expense.currency].ask),\n  );\n  return {\n    ...state,\n    expenses: newArray,\n    total: Number(state.total - newTotal).toFixed(2),\n  };\n  \n  }\n\nexport default wallet;\n"]},"metadata":{},"sourceType":"module"}